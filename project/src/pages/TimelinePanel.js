import { useState, useEffect } from "react";
import "./TimelinePanel.css";
import TutorialModal from '../components/TutorialModal';

function TimelinePanel({ readonly, projectName }) {
  // State ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeline ‡πÅ‡∏•‡∏∞ event
  const [events, setEvents] = useState({});
  const [newEvent, setNewEvent] = useState({ title: "", date: "", description: "" });
  const [currentPage, setCurrentPage] = useState(null);
  const [error, setError] = useState("");
  const [editIndex, setEditIndex] = useState(null);
  const username = localStorage.getItem("username");
  const [isTutorialOpen, setTutorialOpen] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î timeline ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô projectName
  useEffect(() => {
    const fetchTimeline = async () => {
      try {
        const res = await fetch(`http://localhost:5000/api/timeline?username=${username}&project=${projectName}`);
        const data = await res.json();
        const grouped = {};

        for (const ev of data) {
          if (!grouped[ev.page]) grouped[ev.page] = [];
          grouped[ev.page].push(ev);
        }

        setEvents(grouped);
        const firstPage = Object.keys(grouped)[0];
        if (firstPage) setCurrentPage(firstPage);
      } catch (err) {
        console.log("‚ùå ‡πÇ‡∏´‡∏•‡∏î timeline ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      }
    };

    fetchTimeline();
  }, [username, projectName]);

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î textarea ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô events
  useEffect(() => {
    resizeAllTextareas();
  }, [events]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timeline ‡∏•‡∏á MongoDB
  const saveToMongo = async (updated) => {
    try {
      await fetch("http://localhost:5000/api/timeline", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          project: projectName,
          username,
          page: currentPage,
          events: updated[currentPage],
        }),
      });
    } catch {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timeline ‡πÑ‡∏î‡πâ");
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
  const handleAddEvent = () => {
    if (!newEvent.title || !newEvent.date) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà");
      return;
    }

    const updated = { ...events };
    if (!updated[currentPage]) updated[currentPage] = [];

    if (editIndex !== null) {
      updated[currentPage][editIndex] = newEvent;
      setEditIndex(null);
    } else {
      updated[currentPage].push(newEvent);
    }

    setEvents(updated);
    setNewEvent({ title: "", date: "", description: "" });
    setError("");
    saveToMongo(updated);
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e) => {
    setNewEvent({ ...newEvent, [e.target.name]: e.target.value });
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ timeline ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const handlePageChange = (page) => {
    setCurrentPage(page);
    setNewEvent({ title: "", date: "", description: "" });
    setEditIndex(null);
    setError("");
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ timeline ‡πÉ‡∏´‡∏°‡πà
  const handleCreateNewPage = () => {
    const pageName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Timeline ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á:");
    if (pageName && !events[pageName]) {
      setEvents({ ...events, [pageName]: [] });
      setCurrentPage(pageName);
    } else {
      alert("‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const handleEditEvent = (index) => {
    setNewEvent(events[currentPage][index]);
    setEditIndex(index);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  // ‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ timeline
  const handleDeleteEvent = (index) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    const updated = { ...events };
    updated[currentPage].splice(index, 1);
    setEvents(updated);
    saveToMongo(updated);
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ timeline ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏á MongoDB
  const handleRenamePage = async (oldName) => {
    const newName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Timeline:", oldName);
    if (!newName || newName === oldName || events[newName]) return;

    const updated = { ...events };
    updated[newName] = updated[oldName];
    delete updated[oldName];
    setEvents(updated);
    setCurrentPage(newName);

    try {
      await fetch(`http://localhost:5000/api/timeline`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, project: projectName, page: oldName }),
      });

      await fetch(`http://localhost:5000/api/timeline`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, project: projectName, page: newName, events: updated[newName] }),
      });
    } catch (err) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ timeline ‡πÑ‡∏î‡πâ");
      console.error(err);
    }
  };

  // ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ timeline
  const handleDeletePage = async (page) => {
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Timeline "${page}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ`)) return;

    const updated = { ...events };
    delete updated[page];
    setEvents(updated);

    if (currentPage === page) {
      const remaining = Object.keys(updated);
      setCurrentPage(remaining.length > 0 ? remaining[0] : null);
    }

    try {
      await fetch(`http://localhost:5000/api/timeline`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, project: projectName, page }),
      });
    } catch (err) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö timeline ‡πÑ‡∏î‡πâ");
      console.error(err);
    }
  };

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î textarea ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
  const autoResize = (el) => {
    el.style.height = "auto";
    el.style.height = el.scrollHeight + "px";
  };

  const resizeAllTextareas = () => {
    setTimeout(() => {
      document.querySelectorAll("textarea").forEach((textarea) => {
        textarea.style.height = "auto";
        textarea.style.height = `${textarea.scrollHeight}px`;
      });
    }, 0);
  };

  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tutorial modal
  const tutorialSteps = [
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° `+ New` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Timeline ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á'",
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Timeline ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß",
    "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÄ‡∏ä‡πà‡∏ô '‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏ä‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡πÉ‡∏´‡∏°‡πà'",
    "‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏±‡∏á‡∏Å‡∏£' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3 ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°'",
    "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)",
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° `+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÉ‡∏´‡πâ‡∏Å‡∏î `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç` ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏î `üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`",
    "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏Å‡∏î `‡∏•‡∏ö` ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô",
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Timeline ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å `‚úèÔ∏è‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠` ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
    "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Timeline ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å `üóëÔ∏è‡∏•‡∏ö‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå` ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
  ];

  // ------------------------- RETURN -------------------------
  return (
    <div className="timeline-wrapper">
      <h1 className="item-header">
        <button className="tutorial-button" onClick={() => setTutorialOpen(true)}>
          üìò Tutorial !
        </button>
      </h1>

      <TutorialModal
        isOpen={isTutorialOpen}
        onClose={() => setTutorialOpen(false)}
        title="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Timeline"
        steps={tutorialSteps}
        gifUrl="\assets\tutorials\Timeline-Tutorial.gif"
      />

      <h2>üïí Timeline</h2>

      {/* ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤ timeline ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏´‡∏°‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß */}
      {currentPage === null && !readonly && (
        <div className="create-page-section">
          <button onClick={handleCreateNewPage}>+ New</button>
        </div>
      )}

      {currentPage !== null && (
        <div>
          <div className="timeline-pages">
            {Object.keys(events).map((page) => (
              <button
                key={page}
                onClick={() => handlePageChange(page)}
                className={currentPage === page ? "active" : ""}
              >
                {page}
              </button>
            ))}
            {!readonly && <button onClick={handleCreateNewPage}>+ New</button>}
          </div>

          {!readonly && (
            <div className="timeline-form">
              <h3>{editIndex !== null ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå" : `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô ${currentPage}`}</h3>
              {error && <div className="error-message">{error}</div>}

              <input
                type="text"
                name="title"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"
                value={newEvent.title}
                onChange={handleChange}
              />
              <input
                type="text"
                name="date"
                placeholder="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏±‡∏á‡∏Å‡∏£)"
                value={newEvent.date}
                onChange={handleChange}
              />
              <textarea
                name="description"
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                value={newEvent.description}
                onChange={(e) => {
                  handleChange(e);
                  autoResize(e.target);
                }}
                ref={(el) => el && autoResize(el)}
              />
              <button onClick={handleAddEvent}>
                {editIndex !== null ? "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"}
              </button>
            </div>
          )}

          <div className="timeline-list">
            <h3>
              ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô {currentPage}{" "}
              {!readonly && (
                <>
                  <button
                    className="timeline-header-btn"
                    onClick={() => handleRenamePage(currentPage)}
                    title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠"
                  >‚úèÔ∏è‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠</button>
                  <button
                    className="timeline-header-btn"
                    onClick={() => handleDeletePage(currentPage)}
                    title="‡∏•‡∏ö‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå"
                  >üóëÔ∏è‡∏•‡∏ö‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå</button>
                </>
              )}
            </h3>

            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå */}
            {events[currentPage] &&
              events[currentPage].map((event, index) => (
                <div key={index} className="timeline-event">
                  <div className="event-content">
                    <div>
                      <div className="event-date">{event.date}</div>
                      <div className="event-title">{event.title}</div>
                      {event.description && <div className="event-description">{event.description}</div>}
                    </div>
                    {!readonly && (
                      <div className="event-actions">
                        <button onClick={() => handleEditEvent(index)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                        <button onClick={() => handleDeleteEvent(index)}>‡∏•‡∏ö</button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default TimelinePanel;

import React, { useCallback, useState, useEffect, useRef } from "react";
import CustomCharacterNode from "./CustomCharacterNode";
import './RelationshipEditor.css';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useEdgesState,
  useNodesState,
  addEdge,
  ReactFlowProvider,
} from "reactflow";
import "reactflow/dist/style.css";
import TutorialModal from '../components/TutorialModal';

const nodeTypes = {
  customNode: CustomCharacterNode,
};

function RelationshipEditorContent() {
  const username = localStorage.getItem("username");
  const project = localStorage.getItem("last-project");
  const reactFlowWrapper = useRef(null);
  const [characters, setCharacters] = useState([]);
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [saveName, setSaveName] = useState("Untitled");
  const [allSaves, setAllSaves] = useState([]);
  const [showLoadMenu, setShowLoadMenu] = useState(false);
  const [editingName, setEditingName] = useState(false);
  const [showSidebar, setShowSidebar] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [selectedGraph, setSelectedGraph] = useState("");
  const [isTutorialOpen, setTutorialOpen] = useState(false);

  const loadAll = useCallback(async () => {
    try {
      const [resChar, resGraph] = await Promise.all([
        fetch(`http://localhost:5000/api/characters?username=${username}&project=${project}`),
        fetch(`http://localhost:5000/api/relationships?username=${username}&project=${project}`),
      ]);
      const charData = await resChar.json();
      const graphData = await resGraph.json();
      setCharacters(charData);
      setAllSaves(graphData.map((g) => g.name));
    } catch (err) {
      console.error("р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з", err);
    }
  }, [username, project]);

  const onEdgeDoubleClick = (event, edge) => {
  const newLabel = prompt("р╣Бр╕Бр╣Йр╣Др╕Вр╕Кр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М:", edge.label);
  if (newLabel !== null) {
    setEdges((eds) =>
      eds.map((e) =>
        e.id === edge.id ? { ...e, label: newLabel } : e
      )
    );
  }
};

  useEffect(() => {
    loadAll();
  }, [loadAll]);

  const onConnect = useCallback((params) => {
    const label = prompt("р╣Гр╕кр╣Ир╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕Хр╕▒р╕зр╕ер╕░р╕Др╕г:");
    if (!label) return;
    setEdges((eds) =>
      addEdge(
        {
          ...params,
          label,
          animated: true,
          style: { stroke: "#333" },
          labelBgStyle: { fill: "#fff", color: "#333", fillOpacity: 0.7 },
        },
        eds
      )
    );
  }, [setEdges]);

  const deleteNodeById = (id) => {
    setNodes((nds) => nds.filter((n) => n.id !== id));
    setEdges((eds) => eds.filter((e) => e.source !== id && e.target !== id));
  };

  const injectDeleteCallback = (nodes) =>
    nodes.map((node) => ({
      ...node,
      data: {
        ...node.data,
        onDelete: () => deleteNodeById(node.id),
      },
    }));

  const onDrop = (event) => {
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer.getData("application/json"));
    const bounds = reactFlowWrapper.current.getBoundingClientRect();
    const position = {
      x: event.clientX - bounds.left,
      y: event.clientY - bounds.top,
    };
    const id = `${+new Date()}`;
    const newNode = {
      id,
      type: "customNode",
      position,
      data: {
        label: data.name,
        image: data.image,
        onDelete: () => deleteNodeById(id),
      },
    };
    setNodes((nds) => nds.concat(newNode));
  };

  const onDragOver = (event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  };

  const handleSave = async () => {
    if (!saveName.trim()) return alert("р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕▒р╣Йр╕Зр╕Кр╕╖р╣Ир╕нр╣Бр╕Ьр╕Щр╕Ьр╕▒р╕З");
    try {
      const res = await fetch("http://localhost:5000/api/relationships", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username,
          project,
          name: saveName.trim(),
          nodes,
          edges,
        }),
      });
      const data = await res.json();
      if (res.ok) {
        alert(data.message);
        if (!allSaves.includes(saveName)) {
          setAllSaves([...allSaves, saveName]);
        }
      } else {
        alert("тЭМ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: " + data.error);
      }
    } catch (err) {
      alert("тЭМ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╣Др╕бр╣Ир╣Др╕Фр╣Й");
    }
  };

  const loadByName = async (name) => {
    try {
      const res = await fetch(`http://localhost:5000/api/relationships?username=${username}&project=${project}`);
      const data = await res.json();
      const target = data.find((g) => g.name === name);
      if (target) {
        setNodes(injectDeleteCallback(target.nodes));
        setEdges(target.edges);
        setSaveName(name);
        setSelectedGraph(name);
        alert(`тЬЕ р╣Вр╕лр╕ер╕Ф "${name}" р╣Бр╕ер╣Йр╕з`);
      }
    } catch (err) {
      alert("тЭМ р╣Вр╕лр╕ер╕Фр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з");
    }
    setShowLoadMenu(false);
  };

  const handleReset = () => {
    setNodes([]);
    setEdges([]);
  };

  const toggleEditName = () => setEditingName(true);
  const confirmEditName = (e) => {
    if (e.key === "Enter" || e.type === "blur") {
      setEditingName(false);
      setSaveName(saveName.trim() || "Untitled");
    }
  };

  const handleDeleteGraph = async () => {
    if (!selectedGraph) return alert("р╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕гр╕▓р╕Яр╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╕Бр╣Ир╕нр╕Щ");
    const confirm = window.confirm(`р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Бр╕гр╕▓р╕Я "${selectedGraph}" р╕лр╕гр╕╖р╕нр╣Др╕бр╣И?`);
    if (!confirm) return;

    try {
      const res = await fetch(`http://localhost:5000/api/relationships/${selectedGraph}?username=${username}&project=${project}`, {
        method: "DELETE",
      });
      const data = await res.json();
      if (res.ok) {
        alert("тЬЕ р╕ер╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И");
        setSelectedGraph("");
        setSaveName("Untitled");
        setNodes([]);
        setEdges([]);
        loadAll();
      } else {
        alert("тЭМ р╕ер╕Ър╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И: " + data.error);
      }
    } catch (err) {
      alert("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╣Др╕Фр╣Й");
    }
  };

  const tutorialSteps = [
    "ЁЯСд р╣Ар╕ер╕╖р╕нр╕Бр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╕Ир╕▓р╕Бр╣Бр╕Цр╕Ър╕Фр╣Йр╕▓р╕Щр╕Вр╕зр╕▓ р╣Бр╕ер╣Йр╕зр╕ер╕▓р╕Бр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╣Бр╕Ьр╕Щр╕Ьр╕▒р╕Зр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Юр╕┤р╣Ир╕бр╕ер╕Зр╕Бр╕гр╕▓р╕Я",
    "ЁЯФЧ р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М: р╕Др╕ер╕┤р╕Бр╕Ир╕╕р╕Фр╕кр╕╡р╣Ар╕Чр╕▓р╕Ър╕Щр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╕лр╕Щр╕╢р╣Ир╕З р╣Бр╕ер╣Йр╕зр╕ер╕▓р╕Бр╣Др╕Ыр╕вр╕▒р╕Зр╕нр╕╡р╕Бр╕Хр╕▒р╕зр╕лр╕Щр╕╢р╣Ир╕З р╕Ир╕░р╕бр╕╡р╕лр╕Щр╣Йр╕▓р╕Хр╣Ир╕▓р╕Зр╣Гр╕лр╣Йр╕Бр╕гр╕нр╕Бр╕Кр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М",
    "тЬВя╕П р╕ер╕Ър╕Хр╕▒р╕зр╕ер╕░р╕Др╕г: р╕Др╕ер╕┤р╕Бр╕Ыр╕╕р╣Ир╕б ЁЯЧСя╕П р╕Ър╕Щр╕Бр╕▓р╕гр╣Мр╕Фр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╣Ар╕Юр╕╖р╣Ир╕нр╕ер╕Ър╕нр╕нр╕Бр╕Ир╕▓р╕Бр╣Бр╕Ьр╕Щр╕Ьр╕▒р╕З",
    "ЁЯТ╛ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Бр╕Ьр╕Щр╕Ьр╕▒р╕З: р╕Юр╕┤р╕бр╕Юр╣Мр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Гр╕Щр╕Кр╣Ир╕нр╕Зр╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ р╣Бр╕ер╣Йр╕зр╕Др╕ер╕┤р╕Бр╕Ыр╕╕р╣Ир╕б ЁЯТ╛ Save",
    "ЁЯУВ р╣Вр╕лр╕ер╕Фр╣Бр╕Ьр╕Щр╕Ьр╕▒р╕Зр╣Ар╕Фр╕┤р╕б: р╕Др╕ер╕┤р╕Бр╕Ыр╕╕р╣Ир╕б ЁЯУВ Load р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕Ьр╕Щр╕Ьр╕▒р╕Зр╕Чр╕╡р╣Ир╣Ар╕Др╕вр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕зр╣Й",
    "ЁЯЧСя╕П р╕ер╕Ър╣Бр╕Ьр╕Щр╕Ьр╕▒р╕З: р╕Др╕ер╕┤р╕Бр╕Ыр╕╕р╣Ир╕б ЁЯЧСя╕П Delete р╣Ар╕Юр╕╖р╣Ир╕нр╕ер╕Ър╣Бр╕Ьр╕Щр╕Ьр╕▒р╕Зр╕Чр╕╡р╣Ир╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Ыр╕┤р╕Ф",
    "ЁЯФБ Reset: р╕Др╕ер╕┤р╕Б ЁЯФБ Reset р╣Ар╕Юр╕╖р╣Ир╕нр╕ер╣Йр╕▓р╕Зр╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕Зр╣Бр╕ер╣Йр╕зр╣Ар╕гр╕┤р╣Ир╕бр╣Гр╕лр╕бр╣И",
  ];

  return (
    <div className="relationship-editor">
      <h2 className="relationship-header">ЁЯСе Relationships &nbsp;
        {/* р╕Ыр╕╕р╣Ир╕б Tutorial */}
        <button className="tutorial-button" onClick={() => setTutorialOpen(true)}>
          ЁЯУШ Tutorial !
        </button>
        </h2>
        <TutorialModal
          isOpen={isTutorialOpen}
          onClose={() => setTutorialOpen(false)}
          title="р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ New Character"
          steps={tutorialSteps}
          gifUrl="\assets\tutorials\Relationships-Tutorial.gif"
        />
      <div className="editor-toolbar">
        <div>
          {editingName ? (
            <input
              value={saveName}
              onChange={(e) => setSaveName(e.target.value)}
              onKeyDown={confirmEditName}
              onBlur={confirmEditName}
              autoFocus
            />
          ) : (
            <span style={{ fontWeight: "bold", fontSize: 16 }}>
              ЁЯУД {saveName} <button onClick={toggleEditName}>тЬПя╕П</button>
            </span>
          )}
        </div>
        <button onClick={handleSave}>ЁЯТ╛ Save</button>
        <div style={{ position: "relative" }}>
          <button onClick={() => setShowLoadMenu(!showLoadMenu)}>ЁЯУВ Load</button>
          {showLoadMenu && (
            <div className="load-menu">
              {allSaves.map((name, idx) => (
                <div key={idx} onClick={() => loadByName(name)}>
                  ЁЯУБ {name}
                </div>
              ))}
            </div>
          )}
        </div>
        <button className="delete-button" onClick={handleDeleteGraph}>ЁЯЧСя╕П Delete</button>
        <button onClick={handleReset}>ЁЯФБ Reset</button>
        <button onClick={() => setShowSidebar(!showSidebar)}>ЁЯУЛ р╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╕Чр╕╡р╣Ир╕бр╕╡</button>
      </div>

      <div
        ref={reactFlowWrapper}
        style={{ width: "100%", height: "100%" }}
        onDrop={onDrop}
        onDragOver={onDragOver}
      >
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onEdgeDoubleClick={onEdgeDoubleClick}
          fitView
          nodeTypes={nodeTypes}
          connectionMode="loose"
        >
          <MiniMap className="fixed-minimap" pannable zoomable />
          <Controls className="fixed-controls" />
          <Background />
        </ReactFlow>
      </div>

      <div className={`character-sidebar ${showSidebar ? '' : 'hidden'}`}>
        <h4>р╕ер╕▓р╕Бр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╣Бр╕Ьр╕Щр╕Ьр╕▒р╕З</h4>
        <input
          type="text"
          placeholder="ЁЯФН р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕Хр╕▒р╕зр╕ер╕░р╕Др╕г..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          style={{
            width: "100%",
            padding: "8px",
            marginBottom: "12px",
            border: "1px solid #ccc",
            borderRadius: "4px",
          }}
        />
        {characters
            .filter((char) =>
              char.name.toLowerCase().includes(searchText.toLowerCase())
            )
            .map((char, idx) => (
              <div
                key={idx}
                className="draggable-character"
                draggable
                onDragStart={(e) =>
                  e.dataTransfer.setData("application/json", JSON.stringify(char))
                }
                style={{
                  display: "flex",
                  alignItems: "center",
                  marginTop: "8px",
                  marginBottom: "8px",
                  padding: "6px",
                  border: "1px solid #ccc",
                  borderRadius: "12px",
                  background: "#fff",
                  color: "#000",
                }}
              >
              <img
                src={char.image}
                alt={char.name}
                style={{
                  width: "40px",
                  height: "40px",
                  borderRadius: "50%",
                  marginRight: "10px",
                  objectFit: "cover",
                  border: "1px solid #ccc",
                }}
              />
              <span>{char.name}</span>
            </div>
          ))}
      </div>
    </div>
  );
}

export default function RelationshipEditor() {
  return (
    <ReactFlowProvider>
      <RelationshipEditorContent />
    </ReactFlowProvider>
  );
}

// ‚úÖ Fixed ManuscriptPanel.js: added project to fetch, fixed timeData iteration
import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import TimelinePanel from "./TimelinePanel";
import "./ManuscriptPanel.css";
import TutorialModal from '../components/TutorialModal';

function ManuscriptPanel({ projectName, prefillContent, prefillTitle }) {
  const [text, setText] = useState("");
  const [dictionaryTerm, setDictionaryTerm] = useState("");
  const [definition, setDefinition] = useState("");
  const [chapterTitle, setChapterTitle] = useState("");
  const [selectedSidebar, setSelectedSidebar] = useState("timeline");
  const [characters, setCharacters] = useState([]);
  const [selectedCharacter, setSelectedCharacter] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [timelines, setTimelines] = useState({});
  const [saved, setSaved] = useState(false);
  const navigate = useNavigate();
  const [showSidebar, setShowSidebar] = useState(false);
  const [isTutorialOpen, setTutorialOpen] = useState(false);

  const handleLookup = async () => {
    if (!dictionaryTerm.trim()) return;

    try {
      const res = await fetch(`http://127.0.0.1:5000/lookup?word=${dictionaryTerm}`);
      const data = await res.json();
      const meaning = `üó£ ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•: ${data.translation}
üìò ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: ${data.definition}`;
      setDefinition(meaning);
    } catch {
      setDefinition("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ");
    }
  };

  const handleSaveChapter = async () => {
    const username = localStorage.getItem("username");
    if (!chapterTitle.trim()) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó");
    if (!username) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");

    try {
      const res = await fetch("http://localhost:5000/api/manuscript", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, project: projectName, title: chapterTitle, content: text })
      });
      const data = await res.json();
      if (res.ok) {
        alert(data.message);
        setChapterTitle("");
        setSaved(true);
        setTimeout(() => setSaved(false), 2000);
      } else {
        alert("‚ùå " + data.error);
      }
    } catch {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
    }
  };

  const handleReset = () => {
    setDictionaryTerm("");
    setDefinition("");
    setChapterTitle("");
    setText("");
  };

  const handleCharacterClick = (char) => setSelectedCharacter(char);
  const handleBackToList = () => setSelectedCharacter(null);

  const handleCreateNewTimeline = () => {
    const pageName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Timeline ‡πÉ‡∏´‡∏°‡πà:");
    if (!pageName || timelines[pageName]) return;
    setTimelines({ ...timelines, [pageName]: [] });
  };

  useEffect(() => {
    const fetchData = async () => {
      const username = localStorage.getItem("username");
      const project = localStorage.getItem("last-project");
      if (prefillContent) {
        setText(prefillContent);
        setChapterTitle(prefillTitle || "");
      } else {
        try {
          const res = await fetch(`http://localhost:5000/api/manuscript?username=${username}&project=${projectName}`);
          
          const data = await res.json();
          if (Array.isArray(data) && data.length > 0) {
            setText(data[0].content);
            setChapterTitle(data[0].title);
          }
        } catch {
          console.log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î manuscript");
        }
      }

      try {
        const [charRes, timeRes] = await Promise.all([
          fetch(`http://localhost:5000/api/characters?username=${username}&project=${projectName}`),
          fetch(`http://localhost:5000/api/timeline?username=${username}&project=${projectName}`)
        ]);
        const charData = await charRes.json();
        const timeData = await timeRes.json();

        console.log("üì¶ timeData:", timeData);

        if (Array.isArray(timeData)) {
          const grouped = {};
          for (const ev of timeData) {
            if (!grouped[ev.page]) grouped[ev.page] = [];
            grouped[ev.page].push(ev);
          }
          setTimelines(grouped);
        } else {
          console.error("‚ùå timeData ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array:", timeData);
        }

        setCharacters(charData);
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tools ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
      }
    };

    fetchData();
  }, [prefillContent, prefillTitle, projectName]);

  const textareaRef = useRef(null);
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = textareaRef.current.scrollHeight + "px";
    }
  }, [text]);

  const tutorialSteps = [
    "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ",
    "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üíæ Save Chapter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
    "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏±‡πâ‡∏ô ‡πÜ",
    "‡πÄ‡∏õ‡∏¥‡∏î Sidebar ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üß∞ Tools ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π Timeline ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
    "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π Characters ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    "‡∏î‡∏π Timeline ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π Timeline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
  ];

  return (
    <div className={`manuscript-container ${showSidebar ? 'with-sidebar' : ''}`}>
      <h2>‚úçÔ∏è Manuscript for: {projectName} &nbsp;
        {/* ‡∏õ‡∏∏‡πà‡∏° Tutorial */}
        <button className="tutorial-button" onClick={() => setTutorialOpen(true)}>
          üìò Tutorial !
        </button>
        </h2>
        <TutorialModal
          isOpen={isTutorialOpen}
          onClose={() => setTutorialOpen(false)}
          title="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Manuscript"
          steps={tutorialSteps}
          gifUrl="\assets\tutorials\Manuscript-Tutorial.gif"
        />

      <div className="card-section">
        <div className="card-title">üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÑ‡∏ó‡∏¢</div>
          <div className="dictionary-input-group">
            <input
              type="text"
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
              value={dictionaryTerm}
              onChange={(e) => setDictionaryTerm(e.target.value)}
            />
            <button onClick={handleLookup} className="button button-search">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
          </div>
        <p className="definition-text">{definition}</p>
      </div>

      <div className="card-section">
        <div className="card-title">üìñ Chapter</div>
        <div className="chapter-input-group">
          <input
            type="text"
            className="chapter-input"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô..."
            value={chapterTitle}
            onChange={(e) => setChapterTitle(e.target.value)}
          />
          <button onClick={handleReset} className="button button-reset">üßπ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</button>
          <button onClick={() => setShowSidebar(!showSidebar)} className="button button-tools">üß∞ Tools</button>
        </div>
      </div>

      <textarea
        ref={textareaRef}
        className="manuscript-textarea"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
      />

      <div className="button-save-container">
        <button onClick={handleSaveChapter} className="button-save">
          üíæ Save Chapter
        </button>
      </div>

      {showSidebar && (
        <div className="sidebar">
          <div className="sidebar-menu">
            <button
              className={selectedSidebar === "timeline" ? "active" : ""}
              onClick={() => {
                setSelectedSidebar("timeline");
                setSelectedCharacter(null);
              }}
            >
              ‚è≥ Timeline
            </button>
            <button
              className={selectedSidebar === "characters" ? "active" : ""}
              onClick={() => {
                setSelectedSidebar("characters");
                setSelectedCharacter(null);
              }}
            >
              üßç‚Äç‚ôÄÔ∏è Characters
            </button>
          </div>

          {selectedSidebar === "timeline" && (
            <div className="timeline-scale">
              <TimelinePanel projectName={projectName} />
            </div>
          )}

          {selectedSidebar === "characters" && (
            <div>
              {/* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
              {selectedCharacter ? (
                <div className="character-detail">
                  <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£</h3>
                  <img
                    src={selectedCharacter.image}
                    alt={selectedCharacter.name}
                    style={{
                      width: "100px",
                      height: "100px",
                      objectFit: "cover",
                      borderRadius: "8px",
                      border: "1px solid #ccc",
                      marginBottom: "10px",
                    }}
                  />
                  <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {selectedCharacter.name}</p>
                  <p><strong>‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {selectedCharacter.age || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                  <p><strong>Clan:</strong> {selectedCharacter.clan || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                  <p>
                    <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:</strong><br />
                    {Array.isArray(selectedCharacter.relations) && selectedCharacter.relations.length > 0
                      ? selectedCharacter.relations.map((rel, idx) => (
                          <div key={idx}>‚Ä¢ {rel}</div>
                        ))
                      : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                  </p>
                  <p>
                    <strong>‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:</strong><br />
                    {Array.isArray(selectedCharacter.traits) && selectedCharacter.traits.length > 0
                      ? selectedCharacter.traits.map((trait, idx) => (
                          <div key={idx}>
                            ‚Ä¢ {trait.name}{trait.description ? `: ${trait.description}` : ""}
                          </div>
                        ))
                      : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                  </p>

                  <p>
                    <strong>‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û:</strong><br />
                    {Array.isArray(selectedCharacter.personality) && selectedCharacter.personality.length > 0
                      ? selectedCharacter.personality.map((trait, idx) => (
                          <div key={idx}>
                            ‚Ä¢ {trait.name}{trait.description ? `: ${trait.description}` : ""}
                          </div>
                        ))
                      : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                  </p>
                  <p><strong>Backstory:</strong><br />{selectedCharacter.backstory || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
                  <button onClick={() => setSelectedCharacter(null)} className="button-back">
                    ‚Üê ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                  </button>
                </div>
              ) : (
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
                <div>
                  <input
                    type="text"
                    placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£..."
                    value={searchText}
                    onChange={(e) => setSearchText(e.target.value)}
                    style={{
                      width: "90%",
                      border: "1px solid #ccc",
                      borderRadius: "10px",
                      padding: "8px",
                      marginbottom: "16px",
                      background: "#f9f9ff",
                      fontsize: "15px",
                      transition: "border 0.2s",
                    }}
                  />
                  {characters
                    .filter((char) =>
                      char.name.toLowerCase().includes(searchText.toLowerCase())
                    )
                    .map((char, idx) => (
                      <div
                        key={idx}
                        draggable
                        onDragStart={(e) =>
                          e.dataTransfer.setData("application/json", JSON.stringify(char))
                        }
                        onClick={() => setSelectedCharacter(char)}
                        style={{
                          display: "flex",
                          alignItems: "center",
                          marginTop: "8px",
                          marginBottom: "8px",
                          padding: "6px",
                          border: "1px solid #ccc",
                          borderRadius: "12px",
                          background: "#fff",
                          cursor: "pointer",
                          color: "#000",
                        }}
                      >
                        <img
                          src={char.image}
                          alt={char.name}
                          style={{
                            width: "40px",
                            height: "40px",
                            borderRadius: "50%",
                            marginRight: "10px",
                            objectFit: "cover",
                            border: "1px solid #ccc",
                          }}
                        />
                        <span>{char.name}</span>
                      </div>
                    ))
                  }
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default ManuscriptPanel;
